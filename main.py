from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import pandas as pd
import requests
from io import BytesIO
import os
import json
from google.oauth2 import service_account
from googleapiclient.discovery import build
from urllib.parse import parse_qs

app = FastAPI()

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SPREADSHEET_ID = "1Vl7Tj6gYVCCzmjPTo-X7TUlma9Db9Q2wh5n9m7UeENs"
RANGE = "Import 2407"

creds_dict = json.loads(os.environ["GOOGLE_CREDENTIALS"])
creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
sheets = build("sheets", "v4", credentials=creds).spreadsheets()


@app.post("/process")
async def process(request: Request):
    content_type = request.headers.get("Content-Type", "")
    raw_body = await request.body()
    file_url = None

    try:
        if "application/json" in content_type:
            body = await request.json()
            file_url = body.get("file_url")

        elif "application/x-www-form-urlencoded" in content_type:
            form = await request.form()
            file_url = form.get("file_url")

        elif "text/plain" in content_type or "text/" in content_type:
            text = raw_body.decode("utf-8")
            if "file_url=" in text:
                # parse file_url=something format
                parsed = parse_qs(text)
                file_url = parsed.get("file_url", [None])[0]
            elif "http" in text:
                file_url = text.strip()

    except Exception as e:
        return JSONResponse(status_code=400, content={"error": "failed to parse input", "details": str(e)})

    if not file_url:
        return JSONResponse(status_code=400, content={"error": "No file_url provided"})

    try:
        r = requests.get(file_url)
        file_data = BytesIO(r.content)
        df = pd.read_excel(file_data, engine="openpyxl")
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": "Failed to download or parse Excel", "details": str(e)})

    # –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    keep = [
        "–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏",
        "–ö—É—Ä—Å —É—á–∞—â–µ–≥–æ—Å—è",
        "–†–∞–±–æ—á–∏–π email (–∫–æ–Ω—Ç–∞–∫—Ç)",
        "–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∫–æ–Ω—Ç–∞–∫—Ç)",
        "–ü–æ–ª–Ω–æ–µ –∏–º—è (–∫–æ–Ω—Ç–∞–∫—Ç)",
        "–ù–æ–º–µ—Ä –∞–ø–ø–ª–∏–∫–∞—Ü–∏–∏ (–∫–æ–Ω—Ç–∞–∫—Ç)",
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–∫–æ–Ω—Ç–∞–∫—Ç)",
        "ID –ü–∞—Å–ø–æ—Ä—Ç–∞ (–∫–æ–Ω—Ç–∞–∫—Ç)"
    ]

    df = df[[col for col in keep if col in df.columns]]
    df = df.fillna("")

    # üåü –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ —ç—Ç–∞–ø–æ–≤
    replacements = {
        "–ê–ø–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ (In progress)": "–ê–ø–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞",
        "–ü–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (Submitted)": "–í–∞—à–∞ –∞–ø–ø–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è",
        "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ (Registered)": "–í—ã –µ—â–µ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ (Received)": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ bmu.slash.uz",
        "–û—Ñ—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ñ—Ñ–µ—Ä –æ—Ç BMU –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ!",
        "–û—Ñ—Ñ–µ—Ä –ø—Ä–∏–Ω—è—Ç": "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø—Ä–∏–Ω—è–ª–∏ –æ—Ñ—Ñ–µ—Ä! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç",
        "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞": "–í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ! –ê–ø–ø–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!"
    }

    df["–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏"] = df["–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏"].replace(replacements)

    values = [df.columns.tolist()] + df.values.tolist()

    try:
        sheets.values().clear(spreadsheetId=SPREADSHEET_ID, range=RANGE).execute()
        sheets.values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE,
            valueInputOption="RAW",
            body={"values": values}
        ).execute()
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": "Failed to update Google Sheet", "details": str(e)})

    return {"status": "ok", "rows": len(df)}
